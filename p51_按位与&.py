"""
题目介绍:学习使用按位与&
编写者:gfsq
时间：2025-10-14
"""
"""
对两个数的二进制对应位分别进行 “与操作”，只有当两个对应位都为 1 时，结果位才为 1，否则为 0。
"""
print(3&7)


"""
常用场景：
1. 判断一个数是否为奇数
一个数的二进制末位如果是 1，则为奇数；末位是 0，则为偶数。用 num & 1 可快速判断：
若结果为 1，则 num 是奇数（末位 1 & 1 = 1）；
若结果为 0，则 num 是偶数（末位 0 & 1 = 0）。


2. 清零特定二进制位
若要将一个数的某些二进制位强制设为 0，可与一个 “掩码（mask）” 进行按位与运算:
num = 10  # 二进制：1010
mask = 3  # 二进制：0011（低两位为1，高两位为0）
result = num & mask  # 1010 & 0011 = 0010 → 十进制 2
print(result)  # 输出：2
3.提取特定二进制位
num = 10  # 二进制：1010（第2位是0，第1位是1）
mask = 2  # 二进制：0010（只保留第1位）
result = num & mask  # 1010 & 0010 = 0010 → 十进制 2（说明第1位为1）
print(result)  # 输出：2
按位与运算的操作对象必须是整数，若为浮点数会报错（如 3.5 & 2 会触发 TypeError）；
运算优先级较低，若与其他运算符（如比较、算术运算符）混合使用，建议加括号（如 (a & b) == 0）
"""


"""
计算机存储和运算的默认方式：补码
正数：原码 = 反码 = 补码（三者相同）；
负数：补码 = 反码 + 1（反码是原码符号位不变，其他位取反）
Python 中的整数：无固定位数的补码
Python 与 C/C++ 等语言不同，其整数没有固定的位数（理论上可无限大），但底层运算仍遵循补码规则：
对于正数：二进制表示直接是补码（与原码一致）；
对于负数：Python 会用 “无限个前置 1” 表示补码的符号位（但实际显示时会省略，直接以 -x 形式呈现）。
例如，按位与运算 (-5) & 3：
-5 的补码（简化为 8 位）：11111011；
3 的补码：00000011；

print((-5) & 3)  # 输出：3

"""