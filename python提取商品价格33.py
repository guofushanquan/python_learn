"""
题目描述：使用python提取商品价格
编写者：gfsq
编写时间：2025-10-13
"""
content = """买了1斤黄瓜花了5元
买了20斤苹果花了10元
买了3斤梨花了12.6元
买了3.5斤葡萄花了23.7元
"""
import re

for line in content.split("\n"):
    pattern = r"(\d+\.?\d*)斤(.*)花了(\d+\.?\d*)元"
    match = re.search(pattern, line)
    if match:
        print(match.groups())

"""
这么做是为了提取分组()中的信息
"""

"""
*：匹配前面的字符（.）0 次或多次（贪婪模式，尽可能多匹配）；
?：表示 “小数部分可出现 0 次或 1 次”（即价格可以是整数，也可以是小数）。
.：匹配任意单个字符（除换行符）
+:匹配至少一次
"""

"""
对正则表达式进行解析：
1. (\d)：第一分组，提取 “商品重量的整数部分”
\d：匹配任意单个数字（0-9）；
括号 () 表示 “分组”，用于后续提取该部分内容；
作用：匹配 “斤” 前面的重量数字（如 “1 斤” 中的1、“2 斤” 中的2）。
2. 斤：普通字符，匹配 “斤” 字（重量单位）
无特殊含义，仅作为文本中的固定单位，用于定位重量的结束位置（如 “1 斤” 中的 “斤”）。
3. (.*)：第二分组，提取 “商品名称”
.：匹配任意单个字符（除换行符）；
*：匹配前面的字符（.）0 次或多次（贪婪模式，尽可能多匹配）；
括号 () 表示分组；
作用：匹配 “斤” 和 “花了” 之间的所有内容（即商品名称），如 “黄瓜”“苹果”“梨”“葡萄”。
4. 花了：普通字符，匹配 “花了” 二字
无特殊含义，作为文本中的固定关键词，用于分隔 “商品名称” 和 “价格”。
5. (\d+(\.\d+)?)：第三分组（含子分组），提取 “商品价格”
这是最复杂的部分，用于匹配 “整数价格”（如 5 元）或 “小数价格”（如 12.6 元）：
外层 (\d+(\.\d+)?) 是第三分组，整体表示 “价格”；
\d+：匹配 1 个或多个数字（价格的整数部分，如 5、10、12、23）；
内层 (\.\d+)? 是子分组（第四分组），表示 “可选的小数部分”：
\.：匹配小数点（需转义，否则.表示任意字符）；
\d+：匹配小数点后的 1 个或多个数字（如 6、7）；
?：表示 “小数部分可出现 0 次或 1 次”（即价格可以是整数，也可以是小数）。
6. 元：普通字符，匹配 “元” 字（价格单位）
无特殊含义，作为文本中的固定单位，用于定位价格的结束位置（如 “5 元” 中的 “元”）。
"""

"""
re.search(pattern, line)：在当前行（line）中查找第一个符合正则表达式（pattern）的内容，返回一个匹配对象（match）；若未找到，返回None。
match.groups()：返回匹配对象中所有分组的内容（按分组顺序排列，包括子分组），结果是一个元组。
"""
