"""
题目描述：取一个整数从右端开始的4-7位
编写者:gfsq
时间:2025-10-14
"""
num=int(input("请输入一个整数:"))
tool=~(~0<<4)#为0b00001111
print(bin((num>>4)&tool))
"""
bin(n)	转换为二进制字符串，前缀 0b	bin(255) → '0b11111111'
oct(n)	转换为八进制字符串，前缀 0o	oct(255) → '0o377'
hex(n)	转换为十六进制字符串，前缀 0x	hex(255) → '0xff'（小写字母）
"""

"""
如果需要不带前缀的纯进制数字字符串，或在输出时更灵活地控制格式，可使用格式化字符串（f-string、format() 函数或 % 占位符）。
num = 255

# 1. 使用 f-string（推荐，Python 3.6+）这种方法无前缀
print(f"二进制：{num:b}")    # 输出：二进制：11111111
print(f"八进制：{num:o}")    # 输出：八进制：377
print(f"十六进制（小写）：{num:x}")  # 输出：十六进制（小写）：ff
print(f"十六进制（大写）：{num:X}")  # 输出：十六进制（大写）：FF

# 2. 使用 format() 函数
print("二进制：{}".format(format(num, 'b')))  # 输出：二进制：11111111
print("十六进制：{}".format(format(num, 'X'))) # 输出：十六进制：FF

# 3. 使用 % 占位符（老式语法）
print("八进制：%o" % num)    # 输出：八进制：377
print("十六进制：%x" % num)  # 输出：十六进制：ff
"""

"""
num = 15  # 二进制：1111，十六进制：f

# 二进制，固定 8 位，不足补零
print(f"二进制补零：{num:08b}")  # 输出：二进制补零：00001111

# 十六进制，固定 4 位，不足补零（大写）
print(f"十六进制补零：{num:04X}")  # 输出：十六进制补零：000F
"""

